package gui;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.Timer;

/**
 *
 * @author Fox C
 */
public class Flipper extends javax.swing.JFrame {

    private String signedInUser;

    /**
     * Creates new form Flipper
     */
    public Flipper(String username) {
        initComponents();
        this.setIconImage(new ImageIcon(Flipper.class.getResource("/resources/img/ico-top.png")).getImage());
        this.signedInUser = username;
        if (username != null) {
            signInLabel.setText("Welcome, " + username);
        } else {
            signInLabel.setText("Guest User");
        }
    }

    public Flipper() {
        this(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        normalTextArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        convertButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        secretTextArea = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        copy2 = new javax.swing.JLabel();
        copy1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        signInLabel = new javax.swing.JLabel();
        logOutLabel = new javax.swing.JLabel();
        profileLabel = new javax.swing.JLabel();
        savedMessagesLabel = new javax.swing.JLabel();
        aboutLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SecMes Flipper");
        setMinimumSize(new java.awt.Dimension(750, 500));
        setResizable(false);

        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Powered by ipmFoxC Software Solutions");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Normal Message");

        normalTextArea.setColumns(20);
        normalTextArea.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        normalTextArea.setForeground(new java.awt.Color(51, 51, 51));
        normalTextArea.setLineWrap(true);
        normalTextArea.setRows(5);
        normalTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(normalTextArea);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Generated Message");

        convertButton.setBackground(new java.awt.Color(0, 153, 51));
        convertButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        convertButton.setForeground(new java.awt.Color(255, 255, 255));
        convertButton.setText("Convert Message");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        secretTextArea.setColumns(20);
        secretTextArea.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        secretTextArea.setForeground(new java.awt.Color(102, 102, 102));
        secretTextArea.setLineWrap(true);
        secretTextArea.setRows(5);
        secretTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(secretTextArea);

        clearButton.setBackground(new java.awt.Color(153, 0, 0));
        clearButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText("Clear All");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 153, 153));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Save Message");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        copy2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ico/copy-two-paper-sheets-interface-symbol.png"))); // NOI18N
        copy2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        copy2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copy2MouseClicked(evt);
            }
        });

        copy1.setForeground(new java.awt.Color(255, 255, 255));
        copy1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ico/copy-two-paper-sheets-interface-symbol.png"))); // NOI18N
        copy1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        copy1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copy1MouseClicked(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 153, 153));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Save Message");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(copy2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(copy1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(copy1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(convertButton)
                    .addComponent(copy2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(jButton3))
                .addGap(4, 4, 4)
                .addComponent(jLabel10)
                .addContainerGap())
        );

        signInLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        signInLabel.setForeground(new java.awt.Color(255, 255, 255));
        signInLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signInLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ico/user.png"))); // NOI18N
        signInLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        signInLabel.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        logOutLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        logOutLabel.setForeground(new java.awt.Color(255, 255, 255));
        logOutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ico/logout.png"))); // NOI18N
        logOutLabel.setText("Log Out");
        logOutLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logOutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutLabelMouseClicked(evt);
            }
        });

        profileLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ico/profile.png"))); // NOI18N
        profileLabel.setToolTipText("My Profile");
        profileLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        profileLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profileLabelMouseClicked(evt);
            }
        });

        savedMessagesLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ico/saved-msgs.png"))); // NOI18N
        savedMessagesLabel.setToolTipText("Saved Messages");
        savedMessagesLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        savedMessagesLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                savedMessagesLabelMouseClicked(evt);
            }
        });

        aboutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ico/about.png"))); // NOI18N
        aboutLabel.setToolTipText("Aboout");
        aboutLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aboutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aboutLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(signInLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(profileLabel)
                .addGap(18, 18, 18)
                .addComponent(savedMessagesLabel)
                .addGap(18, 18, 18)
                .addComponent(aboutLabel)
                .addGap(24, 24, 24))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(logOutLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(signInLabel)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(aboutLabel)
                        .addComponent(savedMessagesLabel)
                        .addComponent(profileLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logOutLabel)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Converting Class
    public class SecretAlphabetMapper {

        // Method to encode a message using the Secret Alphabet Mapping
        public static String encode(String message) {
            if (message == null) {
                return null;
            }

            StringBuilder result = new StringBuilder();

            for (char c : message.toCharArray()) {
                if (Character.isLetter(c)) {
                    // Convert to uppercase for consistency
                    char upperC = Character.toUpperCase(c);

                    // Get the mapped character
                    char encoded = getMappedChar(upperC);

                    // Preserve original case
                    if (Character.isLowerCase(c)) {
                        encoded = Character.toLowerCase(encoded);
                    }

                    result.append(encoded);
                } else {
                    // Keep non-alphabetic characters as is
                    result.append(c);
                }
            }

            return result.toString();
        }

        // Method to decode a message that was encoded with the Secret Alphabet Mapping
        public static String decode(String encoded) {
            if (encoded == null) {
                return null;
            }

            StringBuilder result = new StringBuilder();

            for (char c : encoded.toCharArray()) {
                if (Character.isLetter(c)) {
                    // Convert to uppercase for consistency
                    char upperC = Character.toUpperCase(c);

                    // Get the original character
                    char decoded = getOriginalChar(upperC);

                    // Preserve original case
                    if (Character.isLowerCase(c)) {
                        decoded = Character.toLowerCase(decoded);
                    }

                    result.append(decoded);
                } else {
                    // Keep non-alphabetic characters as is
                    result.append(c);
                }
            }

            return result.toString();
        }

        // Helper method to get the mapped character for a given input
        private static char getMappedChar(char c) {
            switch (c) {
                case 'A':
                    return 'W';
                case 'B':
                    return 'X';
                case 'C':
                    return 'Y';
                case 'D':
                    return 'Z';
                case 'E':
                    return 'S';
                case 'F':
                    return 'T';
                case 'G':
                    return 'U';
                case 'H':
                    return 'V';
                case 'I':
                    return 'O';
                case 'J':
                    return 'P';
                case 'K':
                    return 'Q';
                case 'L':
                    return 'R';
                case 'M':
                    return 'K';
                case 'N':
                    return 'L';
                case 'O':
                    return 'M';
                case 'P':
                    return 'N';
                case 'Q':
                    return 'G';
                case 'R':
                    return 'H';
                case 'S':
                    return 'I';
                case 'T':
                    return 'J';
                case 'U':
                    return 'C';
                case 'V':
                    return 'D';
                case 'W':
                    return 'E';
                case 'X':
                    return 'F';
                case 'Y':
                    return 'A';
                case 'Z':
                    return 'B';
                default:
                    return c; // Return as is if not a letter
            }
        }

        // Helper method to get the original character from a mapped one
        private static char getOriginalChar(char c) {
            switch (c) {
                case 'W':
                    return 'A';
                case 'X':
                    return 'B';
                case 'Y':
                    return 'C';
                case 'Z':
                    return 'D';
                case 'S':
                    return 'E';
                case 'T':
                    return 'F';
                case 'U':
                    return 'G';
                case 'V':
                    return 'H';
                case 'O':
                    return 'I';
                case 'P':
                    return 'J';
                case 'Q':
                    return 'K';
                case 'R':
                    return 'L';
                case 'K':
                    return 'M';
                case 'L':
                    return 'N';
                case 'M':
                    return 'O';
                case 'N':
                    return 'P';
                case 'G':
                    return 'Q';
                case 'H':
                    return 'R';
                case 'I':
                    return 'S';
                case 'J':
                    return 'T';
                case 'C':
                    return 'U';
                case 'D':
                    return 'V';
                case 'E':
                    return 'W';
                case 'F':
                    return 'X';
                case 'A':
                    return 'Y';
                case 'B':
                    return 'Z';
                default:
                    return c; // Return as is if not a mapped letter
            }
        }
    }

    //Convert Button
    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        String normalText = normalTextArea.getText();
        String secretText = secretTextArea.getText();
        if (normalText.isBlank() && secretText.isBlank()) {
            JOptionPane.showMessageDialog(this, "Type a Message to Convert.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!normalText.isBlank() && !secretText.isBlank()) {
            JOptionPane.showMessageDialog(this, "One Field Should be Blank.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            if (!normalText.isBlank()) {
                // Encode normal text to secret text
                String encodedText = SecretAlphabetMapper.encode(normalText);
                secretTextArea.setText(encodedText);
            } else {
                // Decode secret text to normal text
                String decodedText = SecretAlphabetMapper.decode(secretText);
                normalTextArea.setText(decodedText);
            }
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    //Clear Button
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        normalTextArea.setText("");
        secretTextArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    // Copy normal text to clipboard
    private void copy1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copy1MouseClicked
        String normalText = normalTextArea.getText();
        if (!normalText.isBlank()) {
            StringSelection stringSelection = new StringSelection(normalText);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);

            copy1.setText("📋 Copied ✅");

            Timer timer = new Timer(3000, e -> {
                copy1.setText("");
            });
            timer.setRepeats(false);
            timer.start();
        }
    }//GEN-LAST:event_copy1MouseClicked

    // Copy secret text to clipboard
    private void copy2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copy2MouseClicked
        String secretText = secretTextArea.getText();
        if (!secretText.isBlank()) {
            StringSelection stringSelection = new StringSelection(secretText);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);

            copy2.setText("📋 Copied ✅");

            Timer timer = new Timer(3000, e -> {
                copy2.setText("");
            });
            timer.setRepeats(false);
            timer.start();
        }
    }//GEN-LAST:event_copy2MouseClicked

    private void saveMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMessageActionPerformed
    }//GEN-LAST:event_saveMessageActionPerformed

    //Log Out
    private void logOutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutLabelMouseClicked
        new SignIn().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logOutLabelMouseClicked

    //Go to About SecMes
    private void aboutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutLabelMouseClicked
        About aboutSecMes = new About(this);
        aboutSecMes.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        this.setEnabled(false);
        aboutSecMes.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                Flipper.this.setEnabled(true);
            }

            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                Flipper.this.setEnabled(true);
            }
        });
        aboutSecMes.pack();
        aboutSecMes.setLocationRelativeTo(null);
        aboutSecMes.setVisible(true);
        aboutSecMes.setResizable(false);
    }//GEN-LAST:event_aboutLabelMouseClicked

    private void profileLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileLabelMouseClicked
        JOptionPane.showMessageDialog(null, "Coming soon in v1.1 Stay tuned!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_profileLabelMouseClicked

    private void savedMessagesLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_savedMessagesLabelMouseClicked
        JOptionPane.showMessageDialog(null, "Coming soon in v1.1 Stay tuned!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_savedMessagesLabelMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JOptionPane.showMessageDialog(null, "Coming soon in v1.1 Stay tuned!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JOptionPane.showMessageDialog(null, "Coming soon in v1.1 Stay tuned!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton convertButton;
    private javax.swing.JLabel copy1;
    private javax.swing.JLabel copy2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel logOutLabel;
    private javax.swing.JTextArea normalTextArea;
    private javax.swing.JLabel profileLabel;
    private javax.swing.JLabel savedMessagesLabel;
    private javax.swing.JTextArea secretTextArea;
    private javax.swing.JLabel signInLabel;
    // End of variables declaration//GEN-END:variables
}
